0. Python class
- Tất cả các class đều có hàm __init__(), chạy khi class đang được khởi tạo. Dùng để gán giá trị cho đối tượng hoặc xử lý khi class khởi tạo. Ví dụ:
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

- seft (hoặc tên khác tuỳ ý): tham chiếu đến instance hiện tại của class, cho phép truy cập các biến thuộc class.
    + seft: bắt buộc phải là tham số đầu tiên của 1 phương thức trong class !
=> Chốt: Tham số đầu tiên trong method là tham chiếu đến instance của class đó !!!

- Kế thừa: Lớp Student kế thừa từ lớp Person
class Student(Person):
  pass
    
    + Sử dụng super() thay cho tên lớp cha, tự động kế thừa các phương thức, thuộc tính của lớp cha đó.

------------------------------------------------------------------------------------------------------
I. Basic Concepts:

1. Tạo project, cài đặt fastapi
python3 -m venv fastapi-env
source fastapi-env/bin/activate
pip3 install fastapi
pip3 install 'fastapi[all]'
create main.py (khai báo FastAPI, và 1 instance app = FastAPI(), tạo api get đầu tiên và build trên swaggerUI bằng uvicorn)
run: uvicorn main:app --reload

2. Path parameter:
- Nhắc đến có nhiều dynamic path kiểu như @app.get('/blog/{id}') - nó là biến trên url, như: số trang trên url để phần trang
+ trong path chứa biến, biến này được truyền vào hàm xử lý cần khai báo kiểu dữ liệu cho nó (nếu không mặc định: str)
kiểu như:
@app.get('/blog/{id}')
def show(id: int):
    ...
+ thêm nữa: dynamic router cần được khai báo phía dưới cùng file, tránh để không ảnh hưởng đến static router giống phần đầu path

3. Query parameter:
- Nhắc đến khi get all 1tr bản ghi thì ko nên => cần các tham số query: limit
Kiểu như:
@app.get('/blog')
def index(limit=10, published: bool = false):
+ các tham số này cần gắn mặc định, tránh warning thiếu tham số khi trên url không truyền limit chẳng hạn

4. Request body
- Thêm body vào request url
- Để thực hiện request body => Sử dụng Pydantic models với các hỗ trợ của nó. (Ví dụ: BaseModel)
- Tag Optional cho phép trường không bắt buộc 

------------------------------------------------------------------------------------------------------
II. Intermediate concepts
1. Debugging
- Tạo debug point trong vsc, khi ứng dụng chạy sẽ dừng lại tại những điểm đó và show ra hết thông tin tại điểm đó
- Command + Shift + P: type "debug:restart", choose: "FastAPI" (Cần tắt các app server đang chạy trước debug)

2. Pydantic schemas
- Nhắc đến việc, khi cần truyền một số biến nào đấy vào query url (dạng request body). Nếu khai báo class thông thường sẽ dẫn đến lỗi pydantic not map type
- Do vậy cần định nghĩa model kế thừa từ BaseModel của pydantic, viết dưới dạng schemas
