0. Python class
- Tất cả các class đều có hàm __init__(), chạy khi class đang được khởi tạo. Dùng để gán giá trị cho đối tượng hoặc xử lý khi class khởi tạo. Ví dụ:
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36)

- seft (hoặc tên khác tuỳ ý): tham chiếu đến instance hiện tại của class, cho phép truy cập các biến thuộc class.
    + seft: bắt buộc phải là tham số đầu tiên của 1 phương thức trong class !
=> Chốt: Tham số đầu tiên trong method là tham chiếu đến instance của class đó !!!

- Kế thừa: Lớp Student kế thừa từ lớp Person
class Student(Person):
  pass
    
    + Sử dụng super() thay cho tên lớp cha, tự động kế thừa các phương thức, thuộc tính của lớp cha đó.

1. Tạo project, cài đặt fastapi
python3 -m venv fastapi-env
source fastapi-env/bin/activate
pip3 install fastapi
pip3 install 'fastapi[all]'
create main.py
run: uvicorn main:app --reload

2. Path parameter:
- Nhắc đến có nhiều dynamic path kiểu như @app.get('/blog/{id}')
+ trong path chứa biến, biến này được truyền vào hàm xử lý cần khai báo kiểu dữ liệu cho nó (nếu không mặc định: str)
kiểu như:
@app.get('/blog/{id}')
def show(id: int):
    ...
+ thêm nữa: dynamic router cần được khai báo phía dưới cùng file, tránh để không ảnh hưởng đến static router giống phần đầu path

3. Query parameter:
- Nhắc đến khi get all 1tr bản ghi thì ko nên => cần các tham số query: limit
Kiểu như:
@app.get('/blog')
def index(limit=10, published: bool = false):
+ các tham số này cần gắn mặc định, tránh warning thiếu tham số

4. Request body
- Thêm body vào request url
- Để thực hiện request body => Sử dụng Pydantic models với các hỗ trợ của nó.
- Tag Optional cho phép trường không bắt buộc 

5. Debugging 